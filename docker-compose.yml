services:
  # FastAPI 서버 (api 폴더 기반)
  api-server:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    working_dir: /app
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - WEATHER_API_KEY=${WEATHER_API_KEY}
      - MYSQL_HOST=mysql
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-mlops2025}
      - MYSQL_DATABASE=weather_mlops
    command: uvicorn api.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - ml-network
    depends_on:
      - mysql

  # Next.js (React) 프론트엔드 (frontend 폴더 기반)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://api-server:8000
    networks:
      - ml-network
    depends_on:
      - api-server

  # 데이터 수집/처리 서비스
  data-processor:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile
    volumes:
      - .:/app
    working_dir: /app
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${S3_BUCKET}
      - WEATHER_API_KEY=${WEATHER_API_KEY}
    command: python src/data/weather_collector.py
    networks:
      - ml-network

  # Streamlit 웹 앱 (비활성화됨)
  # streamlit:
  #   build:
  #     context: .
  #     dockerfile: dockerfiles/Dockerfile
  #   ports:
  #     - "8501:8501"
  #   volumes:
  #     - .:/app
  #   working_dir: /app
  #   environment:
  #     - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
  #     - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
  #     - AWS_REGION=${AWS_REGION}
  #     - S3_BUCKET=${S3_BUCKET}
  #   command: streamlit run app.py --server.port=8501 --server.address=0.0.0.0
  #   networks:
  #     - ml-network
  #   depends_on:
  #     - api-server

  # Jupyter Lab (notebooks 폴더 활용)
  jupyter:
    build:
      context: .
      dockerfile: dockerfiles/Dockerfile.jupyter
    ports:
      - "8888:8888"
    volumes:
      - .:/app
    working_dir: /app
    env_file: .env
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION}
      - S3_BUCKET=${S3_BUCKET}
      - WEATHER_API_KEY=${WEATHER_API_KEY}
      - WANDB_API_KEY=${WANDB_API_KEY}
      - WANDB_ENTITY=${WANDB_ENTITY}
      - WANDB_PROJECT=${WANDB_PROJECT}
      - WANDB_DIR=/tmp/wandb
      
    networks:
      - ml-network

  # MySQL 데이터베이스
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-mlops2025}
      MYSQL_DATABASE: weather_mlops
      TZ: Asia/Seoul
    command: --default-time-zone='+09:00'
    volumes:
      - mysql_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "3307:3306"
    networks:
      - ml-network

  # phpMyAdmin (웹 기반 MySQL 관리)
  phpmyadmin:
    image: phpmyadmin:latest
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
    ports:
      - "8080:80"
    networks:
      - ml-network
    depends_on:
      - mysql

networks:
  ml-network:
    driver: bridge

volumes:
  mysql_data: